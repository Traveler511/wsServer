import express from 'express'
import { WebSocketServer } from 'ws'
import http from 'http'

const app = express()
app.use(express.json())

const clients = new Set()

// ะกะพะทะดะฐัะผ HTTP-ัะตัะฒะตั
const server = http.createServer(app)

// ะกะพะทะดะฐัะผ WebSocket-ัะตัะฒะตั (ะฒ ัะตะถะธะผะต noServer)
const wss = new WebSocketServer({ noServer: true })

server.on('upgrade', (req, socket, head) => {
    if (req.url === '/ws') {
        wss.handleUpgrade(req, socket, head, (ws) => {
            wss.emit('connection', ws, req) // โ ะฟะตัะตะดะฐัะผ ws, ะฝะต wss
        })
    } else {
        socket.destroy()
    }
})

wss.on('connection', (ws) => {
    clients.add(ws)
    console.log('๐ง ะะปะธะตะฝั ะฟะพะดะบะปัััะฝ. ะะปะธะตะฝัะพะฒ:', clients.size)

    if (clients.size > 1) {
        ws.send(JSON.stringify({ type: 'setPlayer', state: 2 }))
    } else {
        ws.send(JSON.stringify({ type: 'setPlayer', state: 1 }))
    }

    ws.on('close', () => {
        clients.delete(ws)
        console.log('๐ช ะะปะธะตะฝั ะพัะบะปัััะฝ. ะััะฐะปะพัั:', clients.size)
    })
})

app.post('/broadcast', (req, res) => {
    const gameState = req.body

    for (const client of clients) {
        if (client.readyState === 1) {
            client.send(JSON.stringify({ type: 'update', state: gameState }))
        }
    }

    res.sendStatus(200)
})

// ะะฐะฟััะบะฐะตะผ ัะตัะฒะตั
const PORT = process.env.PORT || 3001
server.listen(PORT, () => {
    console.log(`๐ WebSocket-ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`)
})
